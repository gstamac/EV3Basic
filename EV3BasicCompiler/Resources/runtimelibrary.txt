
subcall EQ_STRING8       // SSF
{
	IN_S  a 252
	IN_S  b 252
	OUT_8 result
	
	// check if completely equal
	STRINGS COMPARE a b result
	JR_NEQ8 result 0 gotresult
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' result
	JR_EQ8 result 0 gotresult
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' result	
gotresult:
	RETURN
}

subcall IS_TRUE       // SF
{
	IN_S  c 252
	OUT_8 result
	
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' result
	RETURN
}

subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}

subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall EQ_FLOAT       // FFS
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_EQF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall NE_FLOAT        // FFS
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_NEQF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall LT        // FFS
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_LTF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall GT         // FFS   
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_GTF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall LE        // FFS    
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_LTEQF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall GE        // FFS    
{
	IN_F  a
	IN_F  b
	OUT_S result 8
	
	JR_GTEQF a b istrue
	STRINGS DUPLICATE 'False' result
	RETURN
istrue:
	STRINGS DUPLICATE 'True' result
	RETURN
}

subcall LE_STEP    // FFFS    
// WHEN step>=0  :  result  <- "True" iff a <= b
// ELSE          :  result  <- "True" iff a >= b
{
	IN_F a
	IN_F b
	IN_F step
	OUT_S result 8
	
	JR_LTF step 0.0 negativestep	
	JR_GTF a b deliverfalse
delivertrue:	
	STRINGS DUPLICATE 'True' result	
	RETURN	
negativestep:
	JR_LTEQF b a delivertrue
deliverfalse:
	STRINGS DUPLICATE 'False' result
	RETURN
}

subcall LE_STEP8    // FFFF    
// WHEN step>=0  :  result  <- "True" iff a <= b
// ELSE          :  result  <- "True" iff a >= b
{
	IN_F a
	IN_F b
	IN_F step
	OUT_8 result
	
	JR_LTF step 0.0 negativestep	
	JR_GTF a b deliverfalse
delivertrue:	
	MOVE8_8 1 result	
	RETURN	
negativestep:
	JR_LTEQF b a delivertrue
deliverfalse:
	MOVE8_8 0 result	
	RETURN
}

subcall AND		      // SSS
{
	IN_S a 8
	IN_S b 8
	OUT_S result 8
	
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' a	
	JR_EQ8 a 0 deliverfalse	
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' b	
	JR_EQ8 b 0 deliverfalse	
delivertrue:
	STRINGS DUPLICATE 'True' result
	RETURN
deliverfalse:
	STRINGS DUPLICATE 'False' result
}

subcall OR		     // SSS  
{
	IN_S a 8
	IN_S b 8
	OUT_S result 8

	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' a	
	JR_NEQ8 a 0 delivertrue	
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' b	
	JR_EQ8 b 0 deliverfalse	
delivertrue:
	STRINGS DUPLICATE 'True' result
	RETURN
deliverfalse:
	STRINGS DUPLICATE 'False' result
}

subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}

subcall ARRAYSTORE_FLOAT   // FFA
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}

subcall ARRAYGET_FLOAT     // FAF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}

subcall ARRAYCREATE_STRING   // F
{
	OUT_16 handle

	DATA8 z
	
	ARRAY CREATE8 504  handle     // 504 bytes are enough to store 2 strings
	MOVE8_8 0 z
	ARRAY FILL handle z
}

subcall ARRAYSTORE_STRING   // FSA
{
	IN_F index
	IN_S v 252	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32
	MUL32 index32 252 index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
	DATA8 zerobyte	
	MOVE8_8 0 zerobyte
clearloop:	
	ARRAY_WRITE handle len zerobyte      // only write a 0 at begin of each string (rest does not matter)
	ADD32 len 252 len
	JR_LT32 len doublelen clearloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	DATA16 slen
	STRINGS GET_SIZE v slen
	JR_LTEQ16 slen 15 shortstring
	ARRAY INIT8 handle index32 252 v v+1 v+2 v+3 v+4 v+5 v+6 v+7 v+8 v+9 v+10 v+11 v+12 v+13 v+14 v+15 v+16 v+17 v+18 v+19 v+20 v+21 v+22 v+23 v+24 v+25 v+26 v+27 v+28 v+29 v+30 v+31 v+32 v+33 v+34 v+35 v+36 v+37 v+38 v+39 v+40 v+41 v+42 v+43 v+44 v+45 v+46 v+47 v+48 v+49 v+50 v+51 v+52 v+53 v+54 v+55 v+56 v+57 v+58 v+59 v+60 v+61 v+62 v+63 v+64 v+65 v+66 v+67 v+68 v+69 v+70 v+71 v+72 v+73 v+74 v+75 v+76 v+77 v+78 v+79 v+80 v+81 v+82 v+83 v+84 v+85 v+86 v+87 v+88 v+89 v+90 v+91 v+92 v+93 v+94 v+95 v+96 v+97 v+98 v+99 v+100 v+101 v+102 v+103 v+104 v+105 v+106 v+107 v+108 v+109 v+110 v+111 v+112 v+113 v+114 v+115 v+116 v+117 v+118 v+119 v+120 v+121 v+122 v+123 v+124 v+125 v+126 v+127 v+128 v+129 v+130 v+131 v+132 v+133 v+134 v+135 v+136 v+137 v+138 v+139 v+140 v+141 v+142 v+143 v+144 v+145 v+146 v+147 v+148 v+149 v+150 v+151 v+152 v+153 v+154 v+155 v+156 v+157 v+158 v+159 v+160 v+161 v+162 v+163 v+164 v+165 v+166 v+167 v+168 v+169 v+170 v+171 v+172 v+173 v+174 v+175 v+176 v+177 v+178 v+179 v+180 v+181 v+182 v+183 v+184 v+185 v+186 v+187 v+188 v+189 v+190 v+191 v+192 v+193 v+194 v+195 v+196 v+197 v+198 v+199 v+200 v+201 v+202 v+203 v+204 v+205 v+206 v+207 v+208 v+209 v+210 v+211 v+212 v+213 v+214 v+215 v+216 v+217 v+218 v+219 v+220 v+221 v+222 v+223 v+224 v+225 v+226 v+227 v+228 v+229 v+230 v+231 v+232 v+233 v+234 v+235 v+236 v+237 v+238 v+239 v+240 v+241 v+242 v+243 v+244 v+245 v+246 v+247 v+248 v+249 v+250 v+251
	RETURN
shortstring:
	ARRAY INIT8 handle index32 16 v v+1 v+2 v+3 v+4 v+5 v+6 v+7 v+8 v+9 v+10 v+11 v+12 v+13 v+14 v+15
negativeindex:
}
	
subcall ARRAYGET_STRING   // FFS
{
	IN_F index
	OUT_S value 252	
	IN_16 handle

	DATA32 index32
	MOVEF_32 index index32
	
	MUL32 252 index32 index32 // every string has 252 bytes
	MOVE8_8 0 value		  // set to empty string in case that nothing can be read
	
	ARRAY READ_CONTENT 1 handle index32 252 value   // transfer memory from program slot 1
}

