// ------------------------------------------ EV3 MODULE: MOTOR ----------------------------------------------

init
{
	OUTPUT_RESET 0 15
}

subcall MOTORDECODEPORTSDESCRIPTOR  //  SV
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}

subcall MOTORDECODEPORTDESCRIPTOR  //  SV
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}

subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
}


subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
}

subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
}

subcall MOTOR.STARTSYNC      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATA8 spd  
	DATA16 trn

	DATAF speed1abs
	DATAF speed2abs
	DATAF tmpf
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	 MOVEF_8 speed1 spd
	 MULF 100.0 speed2 tmpf
	 DIVF tmpf speed1 tmpf
	 SUBF 100.0 tmpf tmpf
	 MOVEF_16 tmpf trn
	JR donecomputation
secondisfaster:
	 MOVEF_8 speed2 spd
	 MULF 100.0 speed1 tmpf
	 DIVF tmpf speed2 tmpf
	 SUBF tmpf 100.0 tmpf
	 MOVEF_16 tmpf trn
donecomputation:

	OUTPUT_STEP_SYNC layer nos spd trn 0 0
}



subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	
	JR_LT8 no 0 no_port
	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result
	RETURN
no_port:
	MOVE8_f 0 result
}

subcall MOTOR.ISBUSY   // SS    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	OUT_S result 8
	
	DATA8 layer
	DATA8 nos
	DATA8 busy
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos

	OUTPUT_TEST layer nos busy
	JR_EQ8 busy 0 notbusy
	STRINGS DUPLICATE 'True' result
	RETURN
notbusy:
	STRINGS DUPLICATE 'False' result
}


subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
}

subcall MOTOR.SCHEDULEPOWER   // SFFFFSV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 pwr
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	MOVEF_8 power pwr
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk
	
	OUTPUT_STEP_POWER layer nos pwr stp1 stp2 stp3 brk
}


subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA16 trn
	DATA32 cnt
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed1abs
	DATAF speed2abs
	DATAF tmpf
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	 MOVEF_8 speed1 spd
	 MULF 100.0 speed2 tmpf
	 DIVF tmpf speed1 tmpf
	 SUBF 100.0 tmpf tmpf
	 MOVEF_16 tmpf trn
	JR donecomputation
secondisfaster:
	 MOVEF_8 speed2 spd
	 MULF 100.0 speed1 tmpf
	 DIVF tmpf speed2 tmpf
	 SUBF tmpf 100.0 tmpf
	 MOVEF_16 tmpf trn
donecomputation:


	JR_LTEQ32 cnt 0 dontmove	
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
}

subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos

	OUTPUT_CLR_COUNT layer nos
}

subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result
	RETURN
noport:	
	MOVE8_F 0 result	
}


inline MOTOR.MOVE     // SFFSV   MOTOR.SCHEDULE MOTORDECODEPORTDESCRIPTOR
{
	CALL MOTOR.SCHEDULE :0 :1 0.0 :2 0.0 :3 

	DATA8 layer:#
	DATA8 nos:#
	DATA8 busy:#
	CALL MOTORDECODEPORTSDESCRIPTOR :0 layer:# nos:#
  motorwaiting:#:
	OUTPUT_TEST layer:# nos:# busy:#
	JR_EQ8 busy:# 0 motornotbusy:#
	SLEEP
	JR motorwaiting:#
  motornotbusy:#:
}

inline MOTOR.MOVEPOWER     // SFFSV   MOTOR.SCHEDULEPOWER MOTORDECODEPORTDESCRIPTOR
{
	CALL MOTOR.SCHEDULEPOWER :0 :1 0.0 :2 0.0 :3 

	DATA8 layer:#
	DATA8 nos:#
	DATA8 busy:#
	CALL MOTORDECODEPORTSDESCRIPTOR :0 layer:# nos:#
  motorwaiting:#:
	OUTPUT_TEST layer:# nos:# busy:#
	JR_EQ8 busy:# 0 motornotbusy:#
	SLEEP
	JR motorwaiting:#
  motornotbusy:#:
}

inline MOTOR.MOVESYNC     // SFFFSV   MOTOR.SCHEDULESYNC MOTORDECODEPORTDESCRIPTOR
{
	CALL MOTOR.SCHEDULESYNC :0 :1 :2 :3 :4

	DATA8 layer:#
	DATA8 nos:#
	DATA8 busy:#
	CALL MOTORDECODEPORTSDESCRIPTOR :0 layer:# nos:#
  motorwaiting:#:
	OUTPUT_TEST layer:# nos:# busy:#
	JR_EQ8 busy:# 0 motornotbusy:#
	SLEEP
	JR motorwaiting:#
  motornotbusy:#:
}


inline MOTOR.WAIT     // SV   
{
	DATA8 layer:#
	DATA8 nos:#
	DATA8 busy:#
	CALL MOTORDECODEPORTSDESCRIPTOR :0 layer:# nos:#
  motorwaiting:#:
	OUTPUT_TEST layer:# nos:# busy:#
	JR_EQ8 busy:# 0 motornotbusy:#
	SLEEP
	JR motorwaiting:#
  motornotbusy:#:
}

